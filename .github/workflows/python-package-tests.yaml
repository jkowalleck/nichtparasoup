# GitHubActions for testing
# read the docs: https://help.github.com/en/actions/configuring-and-managing-workflows/configuring-a-workflow

name: PythonPackage Tests

on:
  push:
    tags:
      # run again on release tags to have tools mark them
      - '*.*.*'
    branches:
      - '**'
    paths:
      - '.github/workflows/python-package-*.yaml'
      - '.github/workflows/tests-*.yaml'
      - 'python-package/**'
      - '!python-package/src/nichtparasoup/_web-ui/static/**'
      - '!python-package/docs/**'
      - '!python-package/images/**'
      - '!python-package/**.md'
      - '!python-package/**.rst'
      - '!python-package/AUTHORS'
      - '!python-package/CHANGELOG'
      - '!python-package/INSTALL'
      - '!python-package/LICENSE'
  pull_request:
    branches:
    paths:
      - '.github/workflows/python-package-*.yaml'
      - '.github/workflows/tests-*.yaml'
      - 'python-package/**'
      - '!python-package/src/nichtparasoup/_web-ui/static/**'
      - '!python-package/docs/**'
      - '!python-package/images/**'
      - '!python-package/**.md'
      - '!python-package/**.rst'
      - '!python-package/AUTHORS'
      - '!python-package/CHANGELOG'
      - '!python-package/INSTALL'
      - '!python-package/LICENSE'
  schedule:
    # schedule weekly tests, since install dependencies are not intended to be pinned
    # this means: at 23:42 on Fridays
    - cron: '42 23 * * 5'

defaults:
  run:
    working-directory: python-package
env:
  project-directory: python-package
  reports-directory: reports
  latest-python-version: '3.8'

jobs:
  test:
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # check the style
          - name: 'Style'
            os: ubuntu-latest
            # ${{ env.latest-python-version }}
            python: '3.8'
            toxenv: style
            no-unit-test: true
          # check latest Python for all OS
          - name: Linux
            os: 'ubuntu-latest'
            # ${{ env.latest-python-version }}
            python: '3.8'
            toxenv: tests_start, py38, coverage_report
          - name: Windows
            os: windows-latest
            # ${{ env.latest-python-version }}
            python: '3.8'
            toxenv: py38
          - name: 'MacOs'
            os: macos-latest
            # ${{ env.latest-python-version }}
            python: '3.8'
            toxenv: py38
          # check older Python
          - name: '3.7'
            os: ubuntu-latest
            python: '3.7'
            toxenv: py37
          - name: '3.6'
            os: ubuntu-latest
            python: '3.6'
            toxenv: py36
    steps:
      - name: Fetch Code
        # see https://github.com/actions/checkout
        uses: actions/checkout@v2
      - name: Setup Python ${{ matrix.python_version }}
        # see https://github.com/actions/setup-python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python }}
      - name: Get pip cache dir
        id: pip-cache
        # as shown here: https://github.com/actions/cache/blob/master/examples.md#using-pip-to-get-cache-location
        run: echo "::set-output name=dir::$(python -m pip cache dir)"
      - name: Setup pip cache dir
        continue-on-error: true
        # see https://github.com/actions/cache
        uses: actions/cache@v2
        with:
          path: ${{ steps.pip-cache.outputs.dir }}
          key: pip-${{ runner.os }}-${{ matrix.python }}-${{ hashFiles(format('{0}/requirements/*.txt', env.project-directory)) }}
          restore-keys: pip-${{ runner.os }}-${{ matrix.python }}-
      - name: Install dependencies
        run: |
          python -m pip install wheel setuptools pip
          python -m pip install -r requirements/tox.txt
      - name: Test ${{ env.project-directory }}
        run:
          python -m tox -r -s false --
          --junit-xml=reports/pytests/${{ runner.os }}-${{ matrix.python }}.xml
          -o junit_suite_name=${{ runner.os }}-${{ matrix.python }}
        env:
          TOXENV: ${{ matrix.toxenv }}
          TOX_PARALLEL_NO_SPINNER: 1
      - name: Artifact reports
        if: ${{ always() && ! matrix.no-unit-test }}
        # see https://github.com/actions/upload-artifact
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.reports-directory }}
          path: ${{ env.project-directory }}/${{ env.reports-directory }}/
          if-no-files-found: error
      - name: Tidy pip cache dir
        if: ${{ always() }}
        run: python -m pip cache remove 'nichtparasoup*' || true

  test-reporting_merge:
    name: Merge test reports
    needs: test
    # jus wait until 'test' finished, but run regardless of the outcome
    if: ${{ always() }}
    runs-on: ubuntu-latest
    steps:
      - name: Fetch Code
        # see https://github.com/actions/checkout
        uses: actions/checkout@v2
      - name: Fetch reports
        # see https://github.com/actions/download-artifact
        uses: actions/download-artifact@v2
        with:
          name: ${{ env.reports-directory }}
          path: ${{ env.project-directory }}/${{ env.reports-directory }}
      - name: Setup Python
        # see https://github.com/actions/setup-python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.latest-python-version }}
      - name: Get pip cache dir
        id: pip-cache
        # as shown here: https://github.com/actions/cache/blob/master/examples.md#using-pip-to-get-cache-location
        run: echo "::set-output name=dir::$(python -m pip cache dir)"
      - name: Setup pip cache dir
        continue-on-error: true
        # see https://github.com/actions/cache
        uses: actions/cache@v2
        with:
          path: ${{ steps.pip-cache.outputs.dir }}
          key: pip-${{ runner.os }}-${{ env.latest-python-version }}-${{ hashFiles(format('{0}/requirements/*.txt', env.project-directory)) }}
          restore-keys: pip-${{ runner.os }}-${{ env.latest-python-version }}-
      - name: Install dependencies
        run: |
          python -m pip install wheel setuptools pip
          python -m pip install -r requirements/tox.txt
      - name: Merge pytest-reports
        run: python -m tox -r
        env:
          TOXENV: pytests_merge
      - name: Artifact combined reports
        # see https://github.com/actions/upload-artifact
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.reports-directory }}
          path: ${{ env.project-directory }}/${{ env.reports-directory }}/
          if-no-files-found: error
